<!DOCTYPE html>
<head>
<meta charset="UTF-8">
<title>CS 424 Lab 9</title>
<script src="https://cdn.jsdelivr.net/npm/three@0.115/build/three.js"></script>
<script src="https://cdn.jsdelivr.net/npm/three@0.115/examples/js/controls/OrbitControls.js"></script>
<script src="https://cdn.jsdelivr.net/npm/three@0.115/examples/js/loaders/GLTFLoader.js"></script>
<script>

"use strict";

var canvas, renderer, scene, camera; // Standard three.js requirements.

var controls;  // An OrbitControls object that is used to implement
               // rotation of the scene using the mouse.  (It actually rotates
               // the camera around the scene.)

var animating = false;  // Set to true when an animation is in progress.
var frameNumber = 0;  // Frame number is advanced by 1 for each frame while animating.

var podest; 

var slup1, slup2, slup3, slup4, slup5;

var pivot1, pivot2, pivot3, pivot4, pivot5;

var dach;

var sufit;
/**
 *  The render function draws the scene.
 */
function render() {
    renderer.render(scene, camera);
}


/**
 * This function is called by the init() method to create the world. 
 */
function createWorld() {
    
    renderer.setClearColor("green"); // Background color for scene.
    scene = new THREE.Scene();
    
    // ------------------- Make a camera with viewpoint light ----------------------
    
    camera = new THREE.PerspectiveCamera(30, canvas.width/canvas.height, 0.1, 100);
    camera.position.z = 40;
	camera.position.y = 5;
    var light;  // A light shining from the direction of the camera; moves with the camera.
    light = new THREE.DirectionalLight();
    light.position.set(0,0,1);
    camera.add(light);
    scene.add(camera);
    

    
    //------------------- Create the scene's visible objects ----------------------
	podest =  new THREE.Mesh(
             new THREE.CylinderGeometry(13.5,13.5,0.6,15,1),
             new THREE.MeshPhongMaterial({
               color: 0xFF0080,
               specular: 0x222222,
               shininess: 8,
               shading: THREE.FlatShading
            })
    );
    podest.rotation.y = Math.PI/12;
    scene.add(podest);
	
    var geometry = new THREE.SphereGeometry( 3.7, 32, 32 );
    var texture = new THREE.TextureLoader().load( 'resources/paisley.jpg' );
    var material = new THREE.MeshBasicMaterial( { color: 0x00FFFE, map: texture});
    var sphere = new THREE.Mesh(geometry, material);
    sphere.position.y=3.8;
    scene.add(sphere);
	
	slup1 =  new THREE.Mesh(
             new THREE.CylinderGeometry(0.3,0.3,7.5,30,1),
             new THREE.MeshPhongMaterial({
               color: 0x7c5426,
               specular: 0x222222,
               shininess: 8,
               shading: THREE.FlatShading
            })
    );
    slup1.position.x=11.2;
    slup1.position.y=3.9;
    slup1.position.z=0.55;
    slup1.rotation.y = Math.PI/12;
    scene.add(slup1);

	slup2 =  new THREE.Mesh(
             new THREE.CylinderGeometry(0.3,0.3,7.5,30,1),
             new THREE.MeshPhongMaterial({
               color: 0x7c5426,
               specular: 0x222222,
               shininess: 8,
               shading: THREE.FlatShading
            })
    );
    slup2.position.x=-9.5;
    slup2.position.y=3.9;
    slup2.position.z=6.2;
	slup2.rotation.y = Math.PI/12;
	scene.add(slup2);

	slup3 =  new THREE.Mesh(
             new THREE.CylinderGeometry(0.3,0.3,7.5,30,1),
             new THREE.MeshPhongMaterial({
               color: 0x7c5426,
               specular: 0x222222,
               shininess: 8,
               shading: THREE.FlatShading
            })
    );
    slup3.position.x=2.95;
    slup3.position.y=3.9;
    slup3.position.z=11;
	slup3.rotation.y = Math.PI/12;
	scene.add(slup3);
 
    slup4 =  new THREE.Mesh(
             new THREE.CylinderGeometry(0.3,0.3,7.5,30,1),
             new THREE.MeshPhongMaterial({
               color: 0x7c5426,
               specular: 0x222222,
               shininess: 8,
               shading: THREE.FlatShading
            })
    );
    slup4.position.x=4;
    slup4.position.y=3.9;
    slup4.position.z=-10.5;
	slup4.rotation.y = Math.PI/12;
	scene.add(slup4);
 
 
    slup5 =  new THREE.Mesh(
             new THREE.CylinderGeometry(0.3,0.3,7.5,30,1),
             new THREE.MeshPhongMaterial({
               color: 0x7c5426,
               specular: 0x222222,
               shininess: 8,
               shading: THREE.FlatShading
            })
    );
    slup5.position.x=-8.7;
    slup5.position.y=3.9;
    slup5.position.z=-7.1;
	slup5.rotation.y = Math.PI/12;
	scene.add(slup5);
		
	dach =  new THREE.Mesh(
            new THREE.CylinderGeometry(0.1,12,3,30,1),
            new THREE.MeshPhongMaterial({
               color: 0xFF0080,
               specular: 0x222222,
               shininess: 8,
               shading: THREE.FlatShading
            })
    );
    dach.position.y=9.1;
	scene.add(dach);
		 
	sufit =  new THREE.Mesh(
             new THREE.CylinderGeometry(12,12,0.3,200,1),
             new THREE.MeshPhongMaterial({
                color: 0xFF0080,
                specular: 0x222222,
                shininess: 8,
                shading: THREE.FlatShading
             })
    );
    sufit.position.y=7.5;
	  scene.add(sufit);
	
    var loader = new THREE.GLTFLoader();
 
   var horse1 = loader.load( 'https://threejs.org/examples/models/gltf/Horse.glb', function ( gltf ) {
				gltf.scene.scale.multiplyScalar( 0.03 );
                gltf.scene.position.x = 11;
                gltf.scene.position.z = 1;
                gltf.scene.position.y = 1;
                scene.add( gltf.scene );
    });

    var horse2 = loader.load( 'https://threejs.org/examples/models/gltf/Horse.glb', function ( gltf ) {
				gltf.scene.scale.multiplyScalar( 0.03 );
                gltf.scene.position.x =3;
                gltf.scene.position.z = 11;
                gltf.scene.position.y = 1;
                gltf.scene.rotation.y = -1;
                scene.add( gltf.scene );
    });

    var horse3 = loader.load( 'https://threejs.org/examples/models/gltf/Horse.glb', function ( gltf ) {

				gltf.scene.scale.multiplyScalar( 0.03 );
                gltf.scene.position.x =4;
                gltf.scene.position.z = -10.5;
                gltf.scene.position.y = 1;
                gltf.scene.rotation.y = 1.2;
                scene.add( gltf.scene );
    });
    var horse4 = loader.load( 'https://threejs.org/examples/models/gltf/Horse.glb', function ( gltf ) {
				gltf.scene.scale.multiplyScalar( 0.03 );
                gltf.scene.position.x =-10;
                gltf.scene.position.z = 6;
                gltf.scene.position.y = 1;
                gltf.scene.rotation.y = -2.5;
                scene.add( gltf.scene );
    });
    var horse5 = loader.load( 'https://threejs.org/examples/models/gltf/Horse.glb', function ( gltf ) {
				gltf.scene.scale.multiplyScalar( 0.03 );
                gltf.scene.position.x =-9;
                gltf.scene.position.z = -7;
                gltf.scene.position.y = 1;
                gltf.scene.rotation.y = -3.5;
                scene.add( gltf.scene );
    });

		
	var box1 = new THREE.Box3().setFromObject(slup1);

    var box2 = new THREE.Box3().setFromObject(slup2);

    var box3 = new THREE.Box3().setFromObject(slup3);

    var box4 = new THREE.Box3().setFromObject(slup4);

    var box5 = new THREE.Box3().setFromObject(slup5);
 




    box1.center( slup1.position );

    box2.center( slup2.position );

    box3.center( slup3.position );

    box4.center( slup4.position );

    box5.center( slup5.position );
	

	pivot1 = new THREE.Group();

    pivot2 = new THREE.Group();

    pivot3 = new THREE.Group();

    pivot4 = new THREE.Group();

    pivot5 = new THREE.Group();
 

    scene.add(pivot1);

    scene.add(pivot2);

    scene.add(pivot3);

    scene.add(pivot4);

    scene.add(pivot5);
		 
 
    pivot1.add(slup1);

    pivot2.add(slup2);

    pivot3.add(slup3);

    pivot4.add(slup4);
    
    pivot5.add(slup5);

} // end function createWorld()


/**
 *  This function is called once for each frame of the animation, before
 *  the render() function is called for that frame.  It updates any
 *  animated properties.  The value of the global variable frameNumber
 *  is incrementd 1 before this function is called.
 */
function updateForFrame() {
    
    podest.rotation.y -= 0.013;
	dach.rotation.y -= 0.013;
	sufit.rotation.y -= 0.013;
	
	pivot1.rotation.y -= 0.013;
    pivot2.rotation.y -= 0.013;
    pivot3.rotation.y -= 0.013;
    pivot4.rotation.y -= 0.013;
    pivot5.rotation.y -= 0.013;
    
}


/* ---------------------------- MOUSE AND ANIMATION SUPPORT ------------------

/**
 *  This page uses THREE.OrbitControls to let the user use the mouse to rotate
 *  the view.  OrbitControls are designed to be used during an animation, where
 *  the rotation is updated as part of preparing for the next frame.  The scene
 *  is not automatically updated just because the user drags the mouse.  To get
 *  the rotation to work without animation, I add another mouse listener to the
 *  canvas, just to call the render() function when the user drags the mouse.
 *  The same thing holds for touch events -- I call render for any mouse move
 *  event with one touch.
 */
function installOrbitControls() {
    controls = new THREE.OrbitControls(camera,canvas);
    controls.noPan = true; 
    controls.noZoom = true;
    controls.staticMoving = true;
    function move() {
        controls.update();
        if (! animating) {
            render();
        }
    }
    function down() {
        document.addEventListener("mousemove", move, false);
    }
    function up() {
        document.removeEventListener("mousemove", move, false);
    }
    function touch(event) {
        if (event.touches.length == 1) {
            move();
        }
    }
    canvas.addEventListener("mousedown", down, false);
    canvas.addEventListener("touchmove", touch, false);
}

/*  Called when user changes setting of the Animate checkbox. */
function doAnimateCheckbox() {
   var run = document.getElementById("animateCheckbox").checked;
   if (run != animating) {
       animating = run;
       if (animating) {
           requestAnimationFrame(doFrame);
       }
   }
}

/*  Drives the animation, called by system through requestAnimationFrame() */
function doFrame() {
    if (animating) {
        frameNumber++;
        updateForFrame();
        render();
        requestAnimationFrame(doFrame);
    }
}

/*----------------------------- INITIALIZATION ----------------------------------------

/**
 *  This function is called by the onload event so it will run after the
 *  page has loaded.  It creates the renderer, canvas, and scene objects,
 *  calls createWorld() to add objects to the scene, and renders the
 *  initial view of the scene.  If an error occurs, it is reported.
 */
function init() {
    try {
        canvas = document.getElementById("glcanvas");
        renderer = new THREE.WebGLRenderer({
            canvas: canvas,
            antialias: true,
            alpha: false
        });
    }
    catch (e) {
        document.getElementById("message").innerHTML="<b>Sorry, an error occurred:<br>" +
                e + "</b>";
        return;
    }
    document.getElementById("animateCheckbox").checked = false;
    document.getElementById("animateCheckbox").onchange = doAnimateCheckbox;
    createWorld();
    installOrbitControls();
    render();
}

</script>
</head>
<body onload="init()">

<h2>Three.js Modeling Demo: Merry-Go-Round</h2>

<noscript>
   <p style="color: #AA0000; font-weight: bold">Sorry, but this page requires JavaScript!</p>
</noscript>

<p style="color:#AA0000; font-weight: bold" id="message">
</p>

<p>
   <label><input type="checkbox" id="animateCheckbox"><b>Animate</b></label>
   <b style="margin-left:50px">Use the mouse to rotate the model.</b>
</p>

<div id="canvas-holder" style="float:left; border: thin solid black; background-color: white">
   <canvas width=1200 height=600 id="glcanvas"></canvas>
</div>

</body>
</html>
